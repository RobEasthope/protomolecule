name: Continuous Release

on:
  push:
    branches:
      - main

concurrency: 
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false  # Queue releases instead of cancelling

jobs:
  release:
    name: 🚀 Continuous Release
    runs-on: ubuntu-latest
    timeout-minutes: 15  # Prevent hanging workflows
    permissions:
      contents: write
      packages: write
      pull-requests: write
      issues: read
    steps:
      - name: ⬇️ Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # Use RELEASE_PAT for protected branches
          token: ${{ secrets.RELEASE_PAT }}

      - name: 🔧 Setup Monorepo
        uses: ./.github/actions/setup-monorepo

      - name: 🔐 Validate Required Secrets
        run: |
          # Check for required secrets
          if [ -z "${{ secrets.NPM_TOKEN }}" ]; then
            echo "❌ Error: NPM_TOKEN secret is not configured"
            echo "Please add NPM_TOKEN to your repository secrets for publishing to NPM"
            exit 1
          fi
          echo "✅ NPM_TOKEN is configured"
          
          # Check for optional PAT (warn if missing but don't fail)
          if [ -z "${{ secrets.RELEASE_PAT }}" ]; then
            echo "⚠️ Warning: RELEASE_PAT is not configured"
            echo "Using GITHUB_TOKEN - this may fail if branch protection rules are enabled"
          else
            echo "✅ RELEASE_PAT is configured"
          fi

      - name: 🏗️ Build packages
        run: |
          echo "## 🏗️ Building Packages" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Run the build
          pnpm build || {
            echo "❌ Build failed" >> $GITHUB_STEP_SUMMARY
            echo "Check the logs above for build errors" >> $GITHUB_STEP_SUMMARY
            exit 1
          }
          
          echo "### Build Output Verification" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Track verification results
          VERIFICATION_FAILED=false
          
          # Verify build outputs for publishable packages
          if [ -f "packages/eslint-config/package.json" ]; then
            PKG_PRIVATE=$(node -p "require('./packages/eslint-config/package.json').private || false")
            if [ "$PKG_PRIVATE" != "true" ]; then
              if [ ! -f "packages/eslint-config/dist/index.js" ]; then
                echo "❌ ESLint config: dist/index.js not found" >> $GITHUB_STEP_SUMMARY
                VERIFICATION_FAILED=true
              else
                echo "✅ ESLint config: build output verified" >> $GITHUB_STEP_SUMMARY
                # Additional validation: check file size is reasonable
                FILE_SIZE=$(stat -f%z "packages/eslint-config/dist/index.js" 2>/dev/null || stat -c%s "packages/eslint-config/dist/index.js" 2>/dev/null || echo 0)
                if [ "$FILE_SIZE" -lt 100 ]; then
                  echo "  ⚠️ Warning: dist/index.js seems unusually small (${FILE_SIZE} bytes)" >> $GITHUB_STEP_SUMMARY
                fi
              fi
            fi
          fi
          
          # Check tsconfig if it becomes publishable
          if [ -f "packages/tsconfig/package.json" ]; then
            PKG_PRIVATE=$(node -p "require('./packages/tsconfig/package.json').private || false")
            if [ "$PKG_PRIVATE" != "true" ]; then
              # Add specific checks for tsconfig when it's publishable
              echo "✅ TSConfig package: ready for publishing" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          # Check UI package
          if [ -f "packages/ui/package.json" ]; then
            PKG_PRIVATE=$(node -p "require('./packages/ui/package.json').private || false")
            if [ "$PKG_PRIVATE" != "true" ]; then
              echo "✅ UI package: ready for publishing" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          # Check colours package
          if [ -f "packages/colours/package.json" ]; then
            PKG_PRIVATE=$(node -p "require('./packages/colours/package.json').private || false")
            if [ "$PKG_PRIVATE" != "true" ]; then
              if [ -f "packages/colours/index.css" ]; then
                echo "✅ Colours package: ready for publishing (index.css found)" >> $GITHUB_STEP_SUMMARY
              else
                echo "❌ Colours package: index.css not found" >> $GITHUB_STEP_SUMMARY
                VERIFICATION_FAILED=true
              fi
            fi
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "$VERIFICATION_FAILED" = "true" ]; then
            echo "❌ Build verification failed - see errors above" >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "✅ All build verifications passed" >> $GITHUB_STEP_SUMMARY
          fi

      - name: 📋 Pre-publish Validation
        run: |
          echo "## 📋 Pre-publish Validation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check changeset status
          echo "### Changeset Status" >> $GITHUB_STEP_SUMMARY
          pnpm changeset status --verbose >> $GITHUB_STEP_SUMMARY 2>&1 || {
            echo "⚠️ Note: Some packages may have unreleased changes" >> $GITHUB_STEP_SUMMARY
          }
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Package Build Validation" >> $GITHUB_STEP_SUMMARY
          
          # Verify critical files exist for publishable packages
          if [ -f "packages/eslint-config/dist/index.js" ]; then
            echo "✅ ESLint config build output verified" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ ESLint config build output not found at expected location" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: 🚀 Create Release or Publish
        id: changesets
        uses: changesets/action@v1.4.8
        with:
          # This will run pnpm changeset version && pnpm changeset publish
          publish: pnpm changeset publish
          # Commit message for version updates
          commit: "chore: version packages [skip ci]"
          # Title for version update PRs (if used in PR mode)
          title: "chore: version packages"
          # Create GitHub releases automatically
          createGithubReleases: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          HUSKY: 0 # Disable Husky hooks in CI
          # Add retry configuration for npm operations
          npm_config_fetch_retries: 5
          npm_config_fetch_retry_mintimeout: 20000
          npm_config_fetch_retry_maxtimeout: 120000

      - name: 📦 Publish to GitHub Packages
        if: steps.changesets.outputs.published == 'true'
        env:
          # Using same pattern as Changesets - direct token in env
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Disable command echoing to prevent token exposure
          set +x
          
          echo "## 📦 Publishing to GitHub Packages" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Configure npm for GitHub Packages (similar to how Changesets configures for NPM)
          echo "@protomolecule:registry=https://npm.pkg.github.com" >> ~/.npmrc
          echo "//npm.pkg.github.com/:_authToken=${GITHUB_TOKEN}" >> ~/.npmrc
          
          # Track if any failures occur
          rm -f /tmp/github-packages-failed
          
          # Store the published packages JSON in a variable to avoid parsing issues
          PUBLISHED_PKGS='${{ steps.changesets.outputs.publishedPackages }}'
          
          # Check if we have valid JSON before attempting to parse
          if ! echo "$PUBLISHED_PKGS" | jq empty 2>/dev/null; then
            echo "⚠️ Warning: Published packages output is not valid JSON" >> $GITHUB_STEP_SUMMARY
            echo "Raw output: $PUBLISHED_PKGS" >> $GITHUB_STEP_SUMMARY
            # Try to continue anyway in case the packages were published
            PUBLISHED_PKGS='[]'
          fi
          
          # Publish each package that was just published to NPM
          echo "$PUBLISHED_PKGS" | jq -c '.[]' 2>/dev/null | while read pkg; do
            name=$(echo "$pkg" | jq -r '.name')
            version=$(echo "$pkg" | jq -r '.version')
            dir=$(echo "$name" | sed 's/@protomolecule\///')
            
            if [ -d "packages/$dir" ]; then
              echo "Publishing $name@$version to GitHub Packages..."
              
              # Navigate to package directory with error handling
              if ! cd "packages/$dir"; then
                echo "❌ Failed to navigate to packages/$dir" >> $GITHUB_STEP_SUMMARY
                echo "FAILURE" > /tmp/github-packages-failed
                continue
              fi
              
              # Verify build output exists before publishing
              if [ -f "package.json" ]; then
                # Check for common build output locations
                if [ -d "dist" ] || [ -d "build" ] || [ -d "lib" ] || [ -f "index.css" ] || ls *.d.ts 2>/dev/null | grep -q .; then
                  echo "Build output verified for $name" >> $GITHUB_STEP_SUMMARY
                else
                  # Check if this package has a build script
                  if grep -q '"build":' package.json; then
                    echo "⚠️ Warning: No obvious build output found for $name (checked dist/, build/, lib/)" >> $GITHUB_STEP_SUMMARY
                  fi
                fi
              fi
              
              # Capture publish output and check result
              if output=$(npm publish --access public 2>&1); then
                echo "✅ $name@$version published successfully" >> $GITHUB_STEP_SUMMARY
              elif echo "$output" | grep -qE "(cannot publish over|409 Conflict|You cannot publish over the previously published)"; then
                echo "⏭️ $name@$version already published" >> $GITHUB_STEP_SUMMARY
              else
                echo "❌ $name@$version failed to publish" >> $GITHUB_STEP_SUMMARY
                echo "<details><summary>Error details</summary>" >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY
                echo '```' >> $GITHUB_STEP_SUMMARY
                echo "$output" | head -20 >> $GITHUB_STEP_SUMMARY
                echo '```' >> $GITHUB_STEP_SUMMARY
                echo "</details>" >> $GITHUB_STEP_SUMMARY
                echo "FAILURE" > /tmp/github-packages-failed
              fi
              
              # Return to workspace root
              cd "${{ github.workspace }}"
            else
              echo "⚠️ Package directory not found: packages/$dir" >> $GITHUB_STEP_SUMMARY
              echo "FAILURE" > /tmp/github-packages-failed
            fi
          done
          
          # Clean up npmrc modifications
          sed -i.bak '/@protomolecule:registry/d' ~/.npmrc
          sed -i.bak '/npm.pkg.github.com/d' ~/.npmrc
          rm -f ~/.npmrc.bak
          
          # Check if any failures occurred
          if [ -f /tmp/github-packages-failed ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ **Some packages failed to publish to GitHub Packages**" >> $GITHUB_STEP_SUMMARY
            rm -f /tmp/github-packages-failed
            exit 1
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ **All packages published successfully to GitHub Packages**" >> $GITHUB_STEP_SUMMARY
          fi

      - name: ✨ Enhance GitHub Release Notes  
        if: steps.changesets.outputs.published == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # The changesets action already creates GitHub releases
          # This step can enhance them if needed
          
          # Get the published packages info from changesets output
          PUBLISHED='${{ steps.changesets.outputs.publishedPackages }}'
          
          if [ -n "$PUBLISHED" ] && [ "$PUBLISHED" != "[]" ]; then
            echo "📦 Packages were published successfully"
            echo "$PUBLISHED" | jq '.'
            
            # Optionally enhance the release notes that were already created
            # The changesets action creates releases with changelog content
          else
            echo "No packages were published in this release"
          fi

      - name: 🔍 Post-Publish Verification
        if: steps.changesets.outputs.published == 'true'
        run: |
          echo "## 🔍 Post-Publish Verification" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Parse published packages
          PUBLISHED='${{ steps.changesets.outputs.publishedPackages }}'
          
          if [ -n "$PUBLISHED" ] && [ "$PUBLISHED" != "[]" ]; then
            # Verify each published package exists on NPM
            echo "$PUBLISHED" | jq -r '.[] | "\(.name)@\(.version)"' | while read -r PACKAGE_VERSION; do
              PKG_NAME=$(echo "$PACKAGE_VERSION" | cut -d'@' -f1-2)
              PKG_VERSION=$(echo "$PACKAGE_VERSION" | cut -d'@' -f3)
              
              # Skip private packages
              if [[ "$PKG_NAME" == *"@protomolecule/"* ]]; then
                # Wait a moment for NPM to propagate
                sleep 5
                
                # Check if package is available on NPM (only for public packages)
                if npm view "$PACKAGE_VERSION" version >/dev/null 2>&1; then
                  echo "✅ $PACKAGE_VERSION is available on NPM" >> $GITHUB_STEP_SUMMARY
                else
                  # It might be private or still propagating
                  echo "⚠️ $PACKAGE_VERSION not immediately visible on NPM (may be private or propagating)" >> $GITHUB_STEP_SUMMARY
                fi
              fi
            done
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Publishing process completed" >> $GITHUB_STEP_SUMMARY

      - name: 📊 Generate Release Summary
        if: always()
        run: |
          echo "## 🚀 Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.changesets.outputs.published }}" == "true" ]; then
            echo "### ✅ Release Successful!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Display published packages
            PUBLISHED='${{ steps.changesets.outputs.publishedPackages }}'
            if [ -n "$PUBLISHED" ] && [ "$PUBLISHED" != "[]" ]; then
              echo "**Published Packages:**" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              
              # Parse and display packages nicely
              if command -v jq >/dev/null 2>&1; then
                echo "$PUBLISHED" | jq -r '.[] | "- **\(.name)** v\(.version)"' >> $GITHUB_STEP_SUMMARY || {
                  echo "⚠️ Could not parse package details" >> $GITHUB_STEP_SUMMARY
                  echo '```json' >> $GITHUB_STEP_SUMMARY
                  echo "$PUBLISHED" >> $GITHUB_STEP_SUMMARY
                  echo '```' >> $GITHUB_STEP_SUMMARY
                }
              else
                echo '```json' >> $GITHUB_STEP_SUMMARY
                echo "$PUBLISHED" >> $GITHUB_STEP_SUMMARY
                echo '```' >> $GITHUB_STEP_SUMMARY
              fi
            fi
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "GitHub releases have been created with full changelogs." >> $GITHUB_STEP_SUMMARY
            
          elif [ "${{ steps.changesets.outputs.hasChangesets }}" == "false" ]; then
            echo "### ℹ️ No Release Needed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "No changesets found in this push to main." >> $GITHUB_STEP_SUMMARY
            echo "All packages are up to date." >> $GITHUB_STEP_SUMMARY
          else
            echo "### ⚠️ Release Failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Changesets were found but publishing failed." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Action Required:**" >> $GITHUB_STEP_SUMMARY
            echo "1. Check the workflow logs for detailed error messages" >> $GITHUB_STEP_SUMMARY
            echo "2. Verify NPM_TOKEN is correctly configured" >> $GITHUB_STEP_SUMMARY
            echo "3. Ensure package.json files are valid" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "_Release triggered by commit: \`${{ github.sha }}\`_" >> $GITHUB_STEP_SUMMARY
          echo "_Workflow triggered by: @${{ github.actor }}_" >> $GITHUB_STEP_SUMMARY
