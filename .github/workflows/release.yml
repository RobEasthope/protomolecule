name: Continuous Release

on:
  push:
    branches:
      - main

concurrency: ${{ github.workflow }}-${{ github.ref }}

jobs:
  release:
    name: 🚀 Continuous Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      pull-requests: write
      issues: read
    steps:
      - name: ⬇️ Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # Use PAT if available, otherwise GITHUB_TOKEN
          # PAT needs: repo scope for pushing to protected branches
          token: ${{ secrets.RELEASE_PAT || secrets.GITHUB_TOKEN }}

      - name: 🔧 Setup Monorepo
        uses: ./.github/actions/setup-monorepo

      - name: 🔐 Validate Required Secrets
        run: |
          # Check for required secrets
          if [ -z "${{ secrets.NPM_TOKEN }}" ]; then
            echo "❌ Error: NPM_TOKEN secret is not configured"
            echo "Please add NPM_TOKEN to your repository secrets for publishing to NPM"
            exit 1
          fi
          echo "✅ NPM_TOKEN is configured"
          
          # Check for optional PAT (warn if missing but don't fail)
          if [ -z "${{ secrets.RELEASE_PAT }}" ]; then
            echo "⚠️ Warning: RELEASE_PAT is not configured"
            echo "Using GITHUB_TOKEN - this may fail if branch protection rules are enabled"
          else
            echo "✅ RELEASE_PAT is configured"
          fi

      - name: 🏗️ Build packages
        run: |
          pnpm build
          
          # Verify build outputs for publishable packages
          if [ -f "packages/eslint-config/package.json" ]; then
            if [ ! -f "packages/eslint-config/dist/index.js" ]; then
              echo "❌ Build failed: ESLint config dist/index.js not found"
              exit 1
            fi
          fi
          
          if [ -f "packages/tsconfig/package.json" ]; then
            PKG_PRIVATE=$(node -p "require('./packages/tsconfig/package.json').private")
            if [ "$PKG_PRIVATE" = "false" ]; then
              # Check for expected output files if tsconfig becomes public
              echo "✅ TSConfig package build verified"
            fi
          fi
          
          echo "✅ Build verification passed"

      - name: 📋 Check for changesets
        id: changesets-check
        run: |
          # Check for changeset files, excluding README.md and config.json
          CHANGESET_COUNT=$(find .changeset -name "*.md" -not -name "README.md" 2>/dev/null | wc -l)
          
          if [ "$CHANGESET_COUNT" -gt 0 ]; then
            echo "has_changesets=true" >> $GITHUB_OUTPUT
            echo "Found $CHANGESET_COUNT changeset file(s) to process"
            # List the changesets for visibility
            find .changeset -name "*.md" -not -name "README.md" -exec basename {} \;
          else
            echo "has_changesets=false" >> $GITHUB_OUTPUT
            echo "No changeset files found (excluding README.md)"
          fi

      - name: 🔄 Process changesets and version
        if: steps.changesets-check.outputs.has_changesets == 'true'
        run: |
          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Version packages based on changesets
          pnpm changeset version

          # Commit version bumps
          git add -A
          git commit -m "chore: version packages [skip ci]" || echo "No changes to commit"

      - name: 🚀 Publish to NPM
        if: steps.changesets-check.outputs.has_changesets == 'true'
        id: publish
        run: |
          # Publish packages
          set +e  # Don't exit on error
          pnpm changeset publish > publish-output.txt 2>&1
          PUBLISH_EXIT_CODE=$?
          set -e  # Re-enable exit on error
          
          # Check if publish was successful
          if [ $PUBLISH_EXIT_CODE -eq 0 ] && grep -q "Publishing" publish-output.txt; then
            echo "published=true" >> $GITHUB_OUTPUT
            echo "publish_success=true" >> $GITHUB_OUTPUT
            cat publish-output.txt
          else
            echo "published=false" >> $GITHUB_OUTPUT
            echo "publish_success=false" >> $GITHUB_OUTPUT
            echo "⚠️ NPM publish failed or no packages to publish"
            cat publish-output.txt
            # Don't fail the workflow, but mark as unsuccessful
          fi
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          HUSKY: 0

      - name: 📝 Push version commits
        if: steps.changesets-check.outputs.has_changesets == 'true' && steps.publish.outputs.publish_success == 'true'
        run: |
          # Retry logic for git push (up to 3 attempts with exponential backoff)
          MAX_ATTEMPTS=3
          ATTEMPT=1
          DELAY=2
          
          while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
            echo "Attempt $ATTEMPT of $MAX_ATTEMPTS to push version commits..."
            
            if git push origin main; then
              echo "✅ Successfully pushed version commits"
              break
            else
              if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
                echo "❌ Failed to push after $MAX_ATTEMPTS attempts"
                exit 1
              fi
              
              echo "⚠️ Push failed, retrying in ${DELAY} seconds..."
              sleep $DELAY
              DELAY=$((DELAY * 2))  # Exponential backoff
              ATTEMPT=$((ATTEMPT + 1))
            fi
          done

      - name: 🏷️ Create GitHub Release
        if: steps.publish.outputs.published == 'true'
        run: |
          # Parse the actual published packages from the output
          PUBLISHED_INFO=$(grep "Publishing" publish-output.txt | grep -oE "@[^@]+@[0-9]+\.[0-9]+\.[0-9]+" || echo "")
          
          # Use the dedicated script to parse release information
          RELEASE_INFO=$(echo "$PUBLISHED_INFO" | node scripts/parse-release-info.js)
          
          # Parse the release info
          VERSION=$(echo "$RELEASE_INFO" | node -p "JSON.parse(require('fs').readFileSync(0, 'utf8')).version")
          PACKAGES=$(echo "$RELEASE_INFO" | node -p "JSON.parse(require('fs').readFileSync(0, 'utf8')).packages")
          PACKAGE_DATA=$(echo "$RELEASE_INFO" | node -p "JSON.stringify(JSON.parse(require('fs').readFileSync(0, 'utf8')).packageData)")
          
          # Generate user-friendly release summary
          USER_SUMMARY=$(PUBLISHED_PACKAGES="$PACKAGE_DATA" node scripts/generate-release-summary.js 2>/dev/null || echo "")
          
          # Build release notes
          if [ -n "$USER_SUMMARY" ]; then
            RELEASE_NOTES="$USER_SUMMARY

## 📦 Technical Details

Published packages: $PACKAGES"
          else
            RELEASE_NOTES="## 🚀 Automated Release

Published packages: $PACKAGES

Generated by continuous deployment workflow."
          fi
          
          # Create release with enhanced notes
          gh release create "v$VERSION" \
            --title "v$VERSION" \
            --notes "$RELEASE_NOTES" \
            --target main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📊 Generate Summary
        if: always()
        run: |
          echo "## 🚀 Continuous Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.changesets-check.outputs.has_changesets }}" == "true" ]; then
            if [ "${{ steps.publish.outputs.publish_success }}" == "true" ]; then
              echo "✅ Changesets processed and packages published successfully" >> $GITHUB_STEP_SUMMARY
            else
              echo "⚠️ Changesets processed but NPM publishing failed" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**Action Required:** Check NPM_TOKEN and package configuration" >> $GITHUB_STEP_SUMMARY
            fi
            
            if [ -f publish-output.txt ]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### Publishing Output" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              cat publish-output.txt >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "ℹ️ No changesets found - no release needed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "_Workflow triggered by: ${{ github.actor }}_" >> $GITHUB_STEP_SUMMARY
