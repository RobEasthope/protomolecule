name: Continuous Release

on:
  push:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false # Queue releases instead of cancelling

jobs:
  release:
    name: üöÄ Continuous Release
    runs-on: ubuntu-latest
    timeout-minutes: 15 # Prevent hanging workflows
    permissions:
      contents: write
      pull-requests: write
      issues: read
      packages: write # Required for publishing to GitHub Packages
      id-token: write # Required for npm provenance
    steps:
      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          # Use RELEASE_PAT for protected branches and version commits
          # Required scopes: repo, workflow (if updating workflows)
          token: ${{ secrets.RELEASE_PAT }}

      - name: üîß Setup Monorepo
        uses: ./.github/actions/setup-monorepo

      - name: üîê Validate Required Secrets
        run: |
          # Check for optional PAT (warn if missing but don't fail)
          if [ -z "${{ secrets.RELEASE_PAT }}" ]; then
            echo "‚ö†Ô∏è Warning: RELEASE_PAT is not configured"
            echo "Using GITHUB_TOKEN - this may fail if branch protection rules are enabled"
          else
            echo "‚úÖ RELEASE_PAT is configured"
          fi

          echo "‚úÖ Using npm OIDC trusted publishers for authentication"

      - name: üîç Validate Release Dependencies
        run: |
          echo "## üîç Validating Release Dependencies" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Run validation script and capture output
          if npx tsx scripts/validate-release-deps.ts; then
            echo "‚úÖ All release dependencies are properly configured" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå Release dependency validation failed" >> $GITHUB_STEP_SUMMARY
            echo "Check the logs above for details" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: üèóÔ∏è Build packages
        run: |
          echo "## üèóÔ∏è Building Packages" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Run the build
          pnpm build || {
            echo "‚ùå Build failed" >> $GITHUB_STEP_SUMMARY
            echo "Check the logs above for build errors" >> $GITHUB_STEP_SUMMARY
            exit 1
          }

          echo "### Build Output Verification" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Track verification results
          VERIFICATION_FAILED=false

          # Verify build outputs for publishable packages
          if [ -f "packages/eslint-config/package.json" ]; then
            PKG_PRIVATE=$(node -p "require('./packages/eslint-config/package.json').private || false")
            if [ "$PKG_PRIVATE" != "true" ]; then
              if [ ! -f "packages/eslint-config/dist/index.js" ]; then
                echo "‚ùå ESLint config: dist/index.js not found" >> $GITHUB_STEP_SUMMARY
                VERIFICATION_FAILED=true
              else
                echo "‚úÖ ESLint config: build output verified" >> $GITHUB_STEP_SUMMARY
                # Additional validation: check file size is reasonable
                FILE_SIZE=$(stat -f%z "packages/eslint-config/dist/index.js" 2>/dev/null || stat -c%s "packages/eslint-config/dist/index.js" 2>/dev/null || echo 0)
                if [ "$FILE_SIZE" -lt 100 ]; then
                  echo "  ‚ö†Ô∏è Warning: dist/index.js seems unusually small (${FILE_SIZE} bytes)" >> $GITHUB_STEP_SUMMARY
                fi
              fi
            fi
          fi

          # Check tsconfig if it becomes publishable
          if [ -f "packages/tsconfig/package.json" ]; then
            PKG_PRIVATE=$(node -p "require('./packages/tsconfig/package.json').private || false")
            if [ "$PKG_PRIVATE" != "true" ]; then
              # Add specific checks for tsconfig when it's publishable
              echo "‚úÖ TSConfig package: ready for publishing" >> $GITHUB_STEP_SUMMARY
            fi
          fi

          # Check UI package
          if [ -f "packages/ui/package.json" ]; then
            PKG_PRIVATE=$(node -p "require('./packages/ui/package.json').private || false")
            if [ "$PKG_PRIVATE" != "true" ]; then
              echo "‚úÖ UI package: ready for publishing" >> $GITHUB_STEP_SUMMARY
            fi
          fi

          # Check colours package
          if [ -f "packages/colours/package.json" ]; then
            PKG_PRIVATE=$(node -p "require('./packages/colours/package.json').private || false")
            if [ "$PKG_PRIVATE" != "true" ]; then
              if [ -f "packages/colours/index.css" ]; then
                echo "‚úÖ Colours package: ready for publishing (index.css found)" >> $GITHUB_STEP_SUMMARY
              else
                echo "‚ùå Colours package: index.css not found" >> $GITHUB_STEP_SUMMARY
                VERIFICATION_FAILED=true
              fi
            fi
          fi

          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "$VERIFICATION_FAILED" = "true" ]; then
            echo "‚ùå Build verification failed - see errors above" >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "‚úÖ All build verifications passed" >> $GITHUB_STEP_SUMMARY
          fi

      - name: üìã Pre-publish Validation
        run: |
          echo "## üìã Pre-publish Validation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check changeset status
          echo "### Changeset Status" >> $GITHUB_STEP_SUMMARY
          pnpm changeset status --verbose >> $GITHUB_STEP_SUMMARY 2>&1 || {
            echo "‚ö†Ô∏è Note: Some packages may have unreleased changes" >> $GITHUB_STEP_SUMMARY
          }

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Package Build Validation" >> $GITHUB_STEP_SUMMARY

          # Verify critical files exist for publishable packages
          if [ -f "packages/eslint-config/dist/index.js" ]; then
            echo "‚úÖ ESLint config build output verified" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ö†Ô∏è ESLint config build output not found at expected location" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY

      - name: üöÄ Create Release or Publish
        id: changesets
        uses: changesets/action@v1.5.3
        with:
          # This will run pnpm changeset version && pnpm changeset publish
          # --provenance flag enables supply chain attestations via OIDC
          publish: pnpm changeset publish --provenance
          # Commit message for version updates
          commit: "release: version packages for release"
          # Title for version update PRs - will be enhanced in next step
          title: "release: version packages for release"
          # Create GitHub releases automatically
          createGithubReleases: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # NPM_TOKEN not needed - using OIDC trusted publishers
          HUSKY: 0 # Disable Husky hooks in CI
          # Add retry configuration for npm operations
          npm_config_fetch_retries: 5
          npm_config_fetch_retry_mintimeout: 20000
          npm_config_fetch_retry_maxtimeout: 120000

      - name: üè∑Ô∏è Enhance Release PR Title
        if: steps.changesets.outputs.hasChangesets == 'true' && steps.changesets.outputs.pullRequestNumber != ''
        run: |
          set -euo pipefail

          PR_NUMBER="${{ steps.changesets.outputs.pullRequestNumber }}"
          echo "Enhancing PR #${PR_NUMBER} with package information..."

          # Extract package names from the PR body text (changesets includes them there)
          # Match only package release headers (## @package/name@version format)
          # This avoids matching example package names in changeset descriptions
          PACKAGE_LIST=$(timeout 30s gh pr view "$PR_NUMBER" --json body -q ".body" | \
            grep -E '^## @robeasthope/[a-z0-9-]+@' | \
            grep -oE '@robeasthope/[a-z0-9-]+' | \
            grep -v '@robeasthope/monorepo' | \
            sort -u | \
            tr '\n' ',' | \
            sed 's/,$//' || echo "")

          if [[ -z "$PACKAGE_LIST" ]]; then
            echo "‚ö†Ô∏è  Could not extract package names from PR body, keeping default title"
            exit 0
          fi

          # Create descriptive title
          # Use comma separator only when multiple packages (no trailing comma for single package)
          NEW_TITLE="release: ${PACKAGE_LIST}"

          # Update PR title with timeout
          if timeout 30s gh pr edit "$PR_NUMBER" --title "$NEW_TITLE"; then
            echo "‚úÖ Updated PR #${PR_NUMBER} title to: $NEW_TITLE"
          else
            echo "‚ùå Failed to update PR title (timeout or error)"
            exit 0
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: üìä Detect Published Packages
        id: detect_published
        if: steps.changesets.outputs.published == 'true'
        # Use 'pnpm tsx' not 'tsx' - tsx is in node_modules/.bin, not in PATH
        run: pnpm tsx .github/scripts/detect-published.ts

      - name: üìù Create Individual Package Releases
        if: steps.detect_published.outputs.published == 'true'
        # Use 'pnpm tsx' not 'tsx' - tsx is in node_modules/.bin, not in PATH
        # Pass JSON via environment variable to avoid shell quoting issues
        run: pnpm tsx .github/scripts/create-releases.ts "${{ github.repository }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PUBLISHED_PACKAGES: ${{ steps.detect_published.outputs.publishedPackages }}

      - name: üî¢ Bump Monorepo Version
        if: steps.detect_published.outputs.published == 'true'
        # Use 'pnpm tsx' not 'tsx' - tsx is in node_modules/.bin, not in PATH
        # Pass JSON via environment variable to avoid shell quoting issues
        run: pnpm tsx .github/scripts/bump-monorepo.ts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PUBLISHED_PACKAGES: ${{ steps.detect_published.outputs.publishedPackages }}

      - name: üìù Generate Release Summary from CHANGELOGs
        if: steps.detect_published.outputs.published == 'true'
        # Use 'pnpm tsx' not 'tsx' - tsx is in node_modules/.bin, not in PATH
        # Extracts version-specific sections from package CHANGELOG.md files
        run: pnpm tsx .github/scripts/generate-summary.ts

      - name: üéâ Create Monorepo GitHub Release
        if: steps.detect_published.outputs.published == 'true'
        run: |
          set -euo pipefail

          NEW_VERSION=$(cat /tmp/new-version.txt)

          echo "Creating release with CHANGELOG-based summary..."

          # Create GitHub release (skip if already exists)
          if gh release view "v${NEW_VERSION}" &>/dev/null; then
            echo "‚ö†Ô∏è  Release v${NEW_VERSION} already exists, skipping creation"
            echo "   Existing release: https://github.com/${{ github.repository }}/releases/tag/v${NEW_VERSION}"
          else
            if ! gh release create "v${NEW_VERSION}" \
              --title "v${NEW_VERSION}" \
              --notes-file /tmp/release-summary.txt \
              --target main; then
              echo "‚ùå ERROR: Failed to create monorepo release v${NEW_VERSION}"
              exit 1
            fi
            echo "‚úÖ Successfully created monorepo release v${NEW_VERSION}"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: üì¶ Publish to GitHub Packages
        if: steps.changesets.outputs.published == 'true'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PUBLISHED_PACKAGES: ${{ steps.changesets.outputs.publishedPackages }}
        run: |
          echo "## üì¶ Publishing to GitHub Packages" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Configure npm for GitHub Packages
          echo "//npm.pkg.github.com/:_authToken=${NODE_AUTH_TOKEN}" >> ~/.npmrc
          echo "@robeasthope:registry=https://npm.pkg.github.com" >> ~/.npmrc

          # Run publish script
          if npx tsx scripts/publish-github-packages.ts; then
            echo "‚úÖ Successfully published to GitHub Packages" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ö†Ô∏è GitHub Packages publish had issues (non-fatal)" >> $GITHUB_STEP_SUMMARY
            echo "Packages are still available on npm registry" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY

      - name: ‚ú® Enhance GitHub Release Notes
        if: steps.changesets.outputs.published == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # The changesets action already creates GitHub releases
          # This step can enhance them if needed

          # Get the published packages info from changesets output
          PUBLISHED='${{ steps.changesets.outputs.publishedPackages }}'

          if [ -n "$PUBLISHED" ] && [ "$PUBLISHED" != "[]" ]; then
            echo "üì¶ Packages were published successfully"
            echo "$PUBLISHED" | jq '.'

            # Optionally enhance the release notes that were already created
            # The changesets action creates releases with changelog content
          else
            echo "No packages were published in this release"
          fi

      - name: üîç Post-Publish Verification
        if: steps.changesets.outputs.published == 'true'
        run: |
          echo "## üîç Post-Publish Verification" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Parse published packages
          PUBLISHED='${{ steps.changesets.outputs.publishedPackages }}'

          if [ -n "$PUBLISHED" ] && [ "$PUBLISHED" != "[]" ]; then
            echo "### npm Registry" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            # Verify each published package exists on NPM
            echo "$PUBLISHED" | jq -r '.[] | "\(.name)@\(.version)"' | while read -r PACKAGE_VERSION; do
              PKG_NAME=$(echo "$PACKAGE_VERSION" | cut -d'@' -f1-2)
              PKG_VERSION=$(echo "$PACKAGE_VERSION" | cut -d'@' -f3)

              # Skip private packages
              if [[ "$PKG_NAME" == *"@robeasthope/"* ]]; then
                # Wait a moment for NPM to propagate
                sleep 5

                # Check if package is available on NPM (only for public packages)
                if npm view "$PACKAGE_VERSION" version >/dev/null 2>&1; then
                  echo "‚úÖ $PACKAGE_VERSION is available on npm" >> $GITHUB_STEP_SUMMARY
                else
                  # It might be private or still propagating
                  echo "‚ö†Ô∏è $PACKAGE_VERSION not immediately visible on npm (may be private or propagating)" >> $GITHUB_STEP_SUMMARY
                fi
              fi
            done

            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### GitHub Packages" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "‚úÖ Packages published to GitHub Packages (authentication required for verification)" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Publishing process completed" >> $GITHUB_STEP_SUMMARY

      - name: üìä Generate Release Summary
        if: always()
        run: |
          echo "## üöÄ Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.changesets.outputs.published }}" == "true" ]; then
            echo "### ‚úÖ Release Successful!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            # Display published packages
            PUBLISHED='${{ steps.changesets.outputs.publishedPackages }}'
            if [ -n "$PUBLISHED" ] && [ "$PUBLISHED" != "[]" ]; then
              echo "**Published Packages:**" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY

              # Parse and display packages nicely
              if command -v jq >/dev/null 2>&1; then
                echo "$PUBLISHED" | jq -r '.[] | "- **\(.name)** v\(.version)"' >> $GITHUB_STEP_SUMMARY || {
                  echo "‚ö†Ô∏è Could not parse package details" >> $GITHUB_STEP_SUMMARY
                  echo '```json' >> $GITHUB_STEP_SUMMARY
                  echo "$PUBLISHED" >> $GITHUB_STEP_SUMMARY
                  echo '```' >> $GITHUB_STEP_SUMMARY
                }
              else
                echo '```json' >> $GITHUB_STEP_SUMMARY
                echo "$PUBLISHED" >> $GITHUB_STEP_SUMMARY
                echo '```' >> $GITHUB_STEP_SUMMARY
              fi
            fi

            echo "" >> $GITHUB_STEP_SUMMARY
            echo "GitHub releases have been created with full changelogs." >> $GITHUB_STEP_SUMMARY

          elif [ "${{ steps.changesets.outputs.hasChangesets }}" == "false" ]; then
            echo "### ‚ÑπÔ∏è No Release Needed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "No changesets found in this push to main." >> $GITHUB_STEP_SUMMARY
            echo "All packages are up to date." >> $GITHUB_STEP_SUMMARY
          else
            echo "### ‚ö†Ô∏è Release Failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Changesets were found but publishing failed." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Action Required:**" >> $GITHUB_STEP_SUMMARY
            echo "1. Check the workflow logs for detailed error messages" >> $GITHUB_STEP_SUMMARY
            echo "2. Verify NPM_TOKEN is correctly configured" >> $GITHUB_STEP_SUMMARY
            echo "3. Ensure package.json files are valid" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "_Release triggered by commit: \`${{ github.sha }}\`_" >> $GITHUB_STEP_SUMMARY
          echo "_Workflow triggered by: @${{ github.actor }}_" >> $GITHUB_STEP_SUMMARY
