name: Continuous Release

on:
  push:
    branches:
      - main

concurrency: ${{ github.workflow }}-${{ github.ref }}

jobs:
  release:
    name: 🚀 Continuous Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      pull-requests: write
      issues: read
    steps:
      - name: ⬇️ Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # Use PAT if available, otherwise GITHUB_TOKEN
          # PAT needs: repo scope for pushing to protected branches
          token: ${{ secrets.RELEASE_PAT || secrets.GITHUB_TOKEN }}

      - name: 🔧 Setup Monorepo
        uses: ./.github/actions/setup-monorepo

      - name: 🏗️ Build packages
        run: pnpm build

      - name: 📋 Check for changesets
        id: changesets-check
        run: |
          if ls .changeset/*.md 1> /dev/null 2>&1; then
            echo "has_changesets=true" >> $GITHUB_OUTPUT
            echo "Found changeset files to process"
          else
            echo "has_changesets=false" >> $GITHUB_OUTPUT
            echo "No changeset files found"
          fi

      - name: 🔄 Process changesets and version
        if: steps.changesets-check.outputs.has_changesets == 'true'
        run: |
          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Version packages based on changesets
          pnpm changeset version

          # Commit version bumps
          git add -A
          git commit -m "chore: version packages [skip ci]" || echo "No changes to commit"

      - name: 🚀 Publish to NPM
        if: steps.changesets-check.outputs.has_changesets == 'true'
        id: publish
        run: |
          # Publish packages
          set +e  # Don't exit on error
          pnpm changeset publish > publish-output.txt 2>&1
          PUBLISH_EXIT_CODE=$?
          set -e  # Re-enable exit on error
          
          # Check if publish was successful
          if [ $PUBLISH_EXIT_CODE -eq 0 ] && grep -q "Publishing" publish-output.txt; then
            echo "published=true" >> $GITHUB_OUTPUT
            echo "publish_success=true" >> $GITHUB_OUTPUT
            cat publish-output.txt
          else
            echo "published=false" >> $GITHUB_OUTPUT
            echo "publish_success=false" >> $GITHUB_OUTPUT
            echo "⚠️ NPM publish failed or no packages to publish"
            cat publish-output.txt
            # Don't fail the workflow, but mark as unsuccessful
          fi
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          HUSKY: 0

      - name: 📝 Push version commits
        if: steps.changesets-check.outputs.has_changesets == 'true' && steps.publish.outputs.publish_success == 'true'
        run: |
          git push origin main

      - name: 🏷️ Create GitHub Release
        if: steps.publish.outputs.published == 'true'
        run: |
          # Dynamically find all published packages and their versions
          RELEASE_INFO=$(node -p "
            const fs = require('fs');
            const path = require('path');
            
            // Find all package.json files in packages directory
            const packagesDir = 'packages';
            const packages = [];
            
            if (fs.existsSync(packagesDir)) {
              const dirs = fs.readdirSync(packagesDir);
              for (const dir of dirs) {
                const pkgPath = path.join(packagesDir, dir, 'package.json');
                if (fs.existsSync(pkgPath)) {
                  try {
                    const pkg = JSON.parse(fs.readFileSync(pkgPath, 'utf8'));
                    if (!pkg.private) {
                      packages.push({
                        name: pkg.name,
                        version: pkg.version
                      });
                    }
                  } catch (e) {
                    console.error('Error reading ' + pkgPath + ': ' + e.message);
                  }
                }
              }
            }
            
            // If we found packages, use the highest version
            // Otherwise fall back to a timestamp-based version
            if (packages.length > 0) {
              const versions = packages.map(p => p.version);
              const highest = versions.sort().pop();
              const pkgList = packages.map(p => p.name + '@' + p.version).join(', ');
              JSON.stringify({ version: highest, packages: pkgList });
            } else {
              const date = new Date().toISOString().split('T')[0];
              JSON.stringify({ version: date, packages: 'No packages published' });
            }
          ")
          
          # Parse the release info
          VERSION=$(echo "$RELEASE_INFO" | node -p "JSON.parse(require('fs').readFileSync(0, 'utf8')).version")
          PACKAGES=$(echo "$RELEASE_INFO" | node -p "JSON.parse(require('fs').readFileSync(0, 'utf8')).packages")
          
          # Create release with package info
          gh release create "v$VERSION" \
            --title "v$VERSION" \
            --notes "## 🚀 Automated Release

Published packages: $PACKAGES

Generated by continuous deployment workflow." \
            --target main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📊 Generate Summary
        if: always()
        run: |
          echo "## 🚀 Continuous Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.changesets-check.outputs.has_changesets }}" == "true" ]; then
            if [ "${{ steps.publish.outputs.publish_success }}" == "true" ]; then
              echo "✅ Changesets processed and packages published successfully" >> $GITHUB_STEP_SUMMARY
            else
              echo "⚠️ Changesets processed but NPM publishing failed" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**Action Required:** Check NPM_TOKEN and package configuration" >> $GITHUB_STEP_SUMMARY
            fi
            
            if [ -f publish-output.txt ]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### Publishing Output" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              cat publish-output.txt >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "ℹ️ No changesets found - no release needed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "_Workflow triggered by: ${{ github.actor }}_" >> $GITHUB_STEP_SUMMARY
