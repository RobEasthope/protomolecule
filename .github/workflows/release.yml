name: Continuous Release

on:
  push:
    branches:
      - main

concurrency: 
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false  # Queue releases instead of cancelling

jobs:
  release:
    name: üöÄ Continuous Release
    runs-on: ubuntu-latest
    timeout-minutes: 15  # Prevent hanging workflows
    permissions:
      contents: write
      packages: write
      pull-requests: write
      issues: read
    steps:
      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # Use RELEASE_PAT for protected branches
          token: ${{ secrets.RELEASE_PAT }}

      - name: üîß Setup Monorepo
        uses: ./.github/actions/setup-monorepo

      - name: üîê Validate Required Secrets
        run: |
          # Check for required secrets
          if [ -z "${{ secrets.NPM_TOKEN }}" ]; then
            echo "‚ùå Error: NPM_TOKEN secret is not configured"
            echo "Please add NPM_TOKEN to your repository secrets for publishing to NPM"
            exit 1
          fi
          echo "‚úÖ NPM_TOKEN is configured"
          
          # Check for optional PAT (warn if missing but don't fail)
          if [ -z "${{ secrets.RELEASE_PAT }}" ]; then
            echo "‚ö†Ô∏è Warning: RELEASE_PAT is not configured"
            echo "Using GITHUB_TOKEN - this may fail if branch protection rules are enabled"
          else
            echo "‚úÖ RELEASE_PAT is configured"
          fi

      - name: üèóÔ∏è Build packages
        run: |
          pnpm build
          
          # Verify build outputs for publishable packages
          if [ -f "packages/eslint-config/package.json" ]; then
            if [ ! -f "packages/eslint-config/dist/index.js" ]; then
              echo "‚ùå Build failed: ESLint config dist/index.js not found"
              exit 1
            fi
          fi
          
          if [ -f "packages/tsconfig/package.json" ]; then
            PKG_PRIVATE=$(node -p "require('./packages/tsconfig/package.json').private")
            if [ "$PKG_PRIVATE" = "false" ]; then
              # Check for expected output files if tsconfig becomes public
              echo "‚úÖ TSConfig package build verified"
            fi
          fi
          
          echo "‚úÖ Build verification passed"

      - name: üìã Pre-publish Validation
        run: |
          echo "## üìã Pre-publish Validation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check changeset status verbosely
          echo "### Changeset Status" >> $GITHUB_STEP_SUMMARY
          pnpm changeset status --verbose >> $GITHUB_STEP_SUMMARY 2>&1 || {
            echo "‚ö†Ô∏è Note: Some packages may have unreleased changes" >> $GITHUB_STEP_SUMMARY
          }
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Package Build Validation" >> $GITHUB_STEP_SUMMARY
          
          # Verify critical files exist for publishable packages
          if [ -f "packages/eslint-config/dist/index.js" ]; then
            echo "‚úÖ ESLint config build output verified" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ö†Ô∏è ESLint config build output not found at expected location" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: üìã Check for changesets
        id: changesets-check
        run: |
          # Check for changeset files, excluding README.md and config.json
          CHANGESET_COUNT=$(find .changeset -name "*.md" -not -name "README.md" 2>/dev/null | wc -l)
          
          if [ "$CHANGESET_COUNT" -gt 0 ]; then
            echo "has_changesets=true" >> $GITHUB_OUTPUT
            echo "Found $CHANGESET_COUNT changeset file(s) to process"
            # List the changesets for visibility
            find .changeset -name "*.md" -not -name "README.md" -exec basename {} \;
          else
            echo "has_changesets=false" >> $GITHUB_OUTPUT
            echo "No changeset files found (excluding README.md)"
          fi

      - name: üîÑ Configure Git
        if: steps.changesets-check.outputs.has_changesets == 'true'
        run: |
          # Configure git for commits
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: üîê Setup NPM Authentication
        if: steps.changesets-check.outputs.has_changesets == 'true'
        run: |
          # Create .npmrc with auth token for publishing
          echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
          
          # Verify authentication is working
          npm whoami --registry https://registry.npmjs.org || {
            echo "‚ùå NPM authentication failed. Please check NPM_TOKEN secret."
            exit 1
          }
          echo "‚úÖ NPM authentication configured successfully"
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: üöÄ Version and Publish to NPM
        if: steps.changesets-check.outputs.has_changesets == 'true'
        id: publish
        run: |
          # First, version packages based on changesets
          pnpm changeset version
          
          # Stage all changes immediately to avoid race condition
          git add -A
          
          # Check if there are any changes to commit (either staged or unstaged)
          if ! git diff --staged --quiet || ! git diff --quiet; then
            # Ensure all changes are staged
            git add -A
            
            # Try to publish packages
            set +e  # Don't exit on error
            PUBLISH_TEMP=$(mktemp publish-output-XXXXXX.txt)
            pnpm changeset publish > "$PUBLISH_TEMP" 2>&1
            PUBLISH_EXIT_CODE=$?
            mv "$PUBLISH_TEMP" publish-output.txt
            set -e  # Re-enable exit on error
            
            # Check if publish was successful
            if [ $PUBLISH_EXIT_CODE -eq 0 ] && grep -q "Publishing" publish-output.txt; then
              echo "published=true" >> $GITHUB_OUTPUT
              echo "publish_success=true" >> $GITHUB_OUTPUT
              cat publish-output.txt
              
              # Commit version changes only after successful publish
              git commit -m "chore: version packages [skip ci]"
              echo "version_committed=true" >> $GITHUB_OUTPUT
            else
              echo "published=false" >> $GITHUB_OUTPUT
              echo "publish_success=false" >> $GITHUB_OUTPUT
              echo "version_committed=false" >> $GITHUB_OUTPUT
              echo "‚ö†Ô∏è NPM publish failed - rolling back version changes"
              cat publish-output.txt
              
              # Reset all changes since publish failed
              git reset --hard HEAD
            fi
          else
            echo "No version changes needed"
            echo "published=false" >> $GITHUB_OUTPUT
            echo "publish_success=false" >> $GITHUB_OUTPUT
            echo "version_committed=false" >> $GITHUB_OUTPUT
          fi
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          HUSKY: 0

      - name: üìù Push version commits
        if: steps.publish.outputs.version_committed == 'true'
        run: |
          # Retry logic for git push (up to 3 attempts with exponential backoff)
          MAX_ATTEMPTS=3
          ATTEMPT=1
          DELAY=2
          
          while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
            echo "Attempt $ATTEMPT of $MAX_ATTEMPTS to push version commits..."
            
            if git push origin main; then
              echo "‚úÖ Successfully pushed version commits"
              break
            else
              if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
                echo "‚ùå Failed to push after $MAX_ATTEMPTS attempts"
                exit 1
              fi
              
              echo "‚ö†Ô∏è Push failed, retrying in ${DELAY} seconds..."
              sleep $DELAY
              DELAY=$((DELAY * 2))  # Exponential backoff
              ATTEMPT=$((ATTEMPT + 1))
            fi
          done

      - name: üè∑Ô∏è Create GitHub Release
        if: steps.publish.outputs.published == 'true'
        run: |
          # Extract published packages from changeset output with multiple fallbacks
          # Method 1: Look for changeset's success output (ü¶ã emoji)
          PUBLISHED_PACKAGES=$(grep "ü¶ã" publish-output.txt 2>/dev/null | sed 's/^[[:space:]]*ü¶ã[[:space:]]*//' || echo "")
          
          # Method 2: Look for "Publishing" or "published" lines
          if [ -z "$PUBLISHED_PACKAGES" ]; then
            PUBLISHED_PACKAGES=$(grep -E "(Publishing|published)" publish-output.txt 2>/dev/null | 
              grep -oE "@[a-z0-9-]+/[a-z0-9-]+@[0-9]+\.[0-9]+\.[0-9]+(-[a-z0-9.]+)?" || echo "")
          fi
          
          # Method 3: Look for npm notice lines
          if [ -z "$PUBLISHED_PACKAGES" ]; then
            PUBLISHED_PACKAGES=$(grep "npm notice" publish-output.txt 2>/dev/null | 
              grep -oE "[a-z0-9@/-]+@[0-9]+\.[0-9]+\.[0-9]+(-[a-z0-9.]+)?" || echo "")
          fi
          
          # Validate we found packages
          if [ -z "$PUBLISHED_PACKAGES" ]; then
            echo "‚ö†Ô∏è Warning: Could not parse published packages from output"
            echo "Full output for debugging:"
            cat publish-output.txt
          fi
          
          # Determine version for release tag with validation
          if [ -n "$PUBLISHED_PACKAGES" ]; then
            # Parse version from packages - use the highest version
            VERSION=$(echo "$PUBLISHED_PACKAGES" | grep -oE "[0-9]+\.[0-9]+\.[0-9]+(-[a-z0-9.]+)?" | sort -V | tail -1)
            
            # Validate version format
            if ! echo "$VERSION" | grep -qE "^[0-9]+\.[0-9]+\.[0-9]+(-[a-z0-9.]+)?$"; then
              echo "‚ö†Ô∏è Warning: Invalid version format: $VERSION"
              VERSION=$(date +"%Y.%m.%d")
            fi
          else
            # Fallback to date-based version
            VERSION=$(date +"%Y.%m.%d")
            echo "Using date-based version: $VERSION"
          fi
          
          # Build simple release notes
          RELEASE_NOTES="## üì¶ Published Packages"$'\n\n'"$PUBLISHED_PACKAGES"$'\n\n'"___"$'\n'"*Automated release from continuous deployment workflow*"
          
          # Create GitHub release
          gh release create "v$VERSION" \
            --title "Release v$VERSION" \
            --notes "$RELEASE_NOTES" \
            --target main || {
              echo "‚ö†Ô∏è Release creation failed, but packages were published successfully"
              echo "Manual release can be created for version: v$VERSION"
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: üìä Generate Release Summary
        if: always()
        run: |
          echo "## üöÄ Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.changesets-check.outputs.has_changesets }}" == "true" ]; then
            if [ "${{ steps.publish.outputs.publish_success }}" == "true" ]; then
              echo "### ‚úÖ Release Successful!" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "Packages have been published to NPM successfully." >> $GITHUB_STEP_SUMMARY
              
              if [ -f publish-output.txt ]; then
                echo "" >> $GITHUB_STEP_SUMMARY
                echo "**Published Packages:**" >> $GITHUB_STEP_SUMMARY
                # Extract package info from output
                grep -E "@[a-z0-9-]+/[a-z0-9-]+@[0-9]+\.[0-9]+\.[0-9]+" publish-output.txt | while read -r pkg; do
                  echo "- $pkg" >> $GITHUB_STEP_SUMMARY
                done || echo "See publishing output below for details." >> $GITHUB_STEP_SUMMARY
              fi
            else
              echo "### ‚ö†Ô∏è Release Failed" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "Changesets were found but publishing failed." >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**Action Required:**" >> $GITHUB_STEP_SUMMARY
              echo "1. Check the workflow logs for detailed error messages" >> $GITHUB_STEP_SUMMARY
              echo "2. Verify NPM_TOKEN is correctly configured" >> $GITHUB_STEP_SUMMARY
              echo "3. Ensure package.json files are valid" >> $GITHUB_STEP_SUMMARY
              echo "4. Check if the .npmrc authentication step succeeded" >> $GITHUB_STEP_SUMMARY
            fi
            
            if [ -f publish-output.txt ]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### Publishing Output" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              cat publish-output.txt >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "### ‚ÑπÔ∏è No Release Needed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "No changesets found in this push to main." >> $GITHUB_STEP_SUMMARY
            echo "All packages are up to date." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "_Release triggered by commit: \`${{ github.sha }}\`_" >> $GITHUB_STEP_SUMMARY
          echo "_Workflow triggered by: @${{ github.actor }}_" >> $GITHUB_STEP_SUMMARY
