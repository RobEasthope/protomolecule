name: Continuous Release

on:
  push:
    branches:
      - main

concurrency: 
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false  # Queue releases instead of cancelling

jobs:
  release:
    name: üöÄ Continuous Release
    runs-on: ubuntu-latest
    timeout-minutes: 15  # Prevent hanging workflows
    permissions:
      contents: write
      packages: write
      pull-requests: write
      issues: read
    steps:
      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # Use RELEASE_PAT for protected branches and version commits
          # Required scopes: repo, write:packages, workflow (if updating workflows)
          token: ${{ secrets.RELEASE_PAT }}

      - name: üîß Setup Monorepo
        uses: ./.github/actions/setup-monorepo

      - name: üîê Validate Required Secrets
        run: |
          # Check for required secrets
          if [ -z "${{ secrets.NPM_TOKEN }}" ]; then
            echo "‚ùå Error: NPM_TOKEN secret is not configured"
            echo "Please add NPM_TOKEN to your repository secrets for publishing to NPM"
            exit 1
          fi
          echo "‚úÖ NPM_TOKEN is configured"
          
          # Check for optional PAT (warn if missing but don't fail)
          if [ -z "${{ secrets.RELEASE_PAT }}" ]; then
            echo "‚ö†Ô∏è Warning: RELEASE_PAT is not configured"
            echo "Using GITHUB_TOKEN - this may fail if branch protection rules are enabled"
          else
            echo "‚úÖ RELEASE_PAT is configured"
          fi

      - name: üèóÔ∏è Build packages
        run: |
          echo "## üèóÔ∏è Building Packages" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Run the build
          pnpm build || {
            echo "‚ùå Build failed" >> $GITHUB_STEP_SUMMARY
            echo "Check the logs above for build errors" >> $GITHUB_STEP_SUMMARY
            exit 1
          }
          
          echo "### Build Output Verification" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Track verification results
          VERIFICATION_FAILED=false
          
          # Verify build outputs for publishable packages
          if [ -f "packages/eslint-config/package.json" ]; then
            PKG_PRIVATE=$(node -p "require('./packages/eslint-config/package.json').private || false")
            if [ "$PKG_PRIVATE" != "true" ]; then
              if [ ! -f "packages/eslint-config/dist/index.js" ]; then
                echo "‚ùå ESLint config: dist/index.js not found" >> $GITHUB_STEP_SUMMARY
                VERIFICATION_FAILED=true
              else
                echo "‚úÖ ESLint config: build output verified" >> $GITHUB_STEP_SUMMARY
                # Additional validation: check file size is reasonable
                FILE_SIZE=$(stat -f%z "packages/eslint-config/dist/index.js" 2>/dev/null || stat -c%s "packages/eslint-config/dist/index.js" 2>/dev/null || echo 0)
                if [ "$FILE_SIZE" -lt 100 ]; then
                  echo "  ‚ö†Ô∏è Warning: dist/index.js seems unusually small (${FILE_SIZE} bytes)" >> $GITHUB_STEP_SUMMARY
                fi
              fi
            fi
          fi
          
          # Check tsconfig if it becomes publishable
          if [ -f "packages/tsconfig/package.json" ]; then
            PKG_PRIVATE=$(node -p "require('./packages/tsconfig/package.json').private || false")
            if [ "$PKG_PRIVATE" != "true" ]; then
              # Add specific checks for tsconfig when it's publishable
              echo "‚úÖ TSConfig package: ready for publishing" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          # Check UI package
          if [ -f "packages/ui/package.json" ]; then
            PKG_PRIVATE=$(node -p "require('./packages/ui/package.json').private || false")
            if [ "$PKG_PRIVATE" != "true" ]; then
              echo "‚úÖ UI package: ready for publishing" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          # Check colours package
          if [ -f "packages/colours/package.json" ]; then
            PKG_PRIVATE=$(node -p "require('./packages/colours/package.json').private || false")
            if [ "$PKG_PRIVATE" != "true" ]; then
              if [ -f "packages/colours/index.css" ]; then
                echo "‚úÖ Colours package: ready for publishing (index.css found)" >> $GITHUB_STEP_SUMMARY
              else
                echo "‚ùå Colours package: index.css not found" >> $GITHUB_STEP_SUMMARY
                VERIFICATION_FAILED=true
              fi
            fi
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "$VERIFICATION_FAILED" = "true" ]; then
            echo "‚ùå Build verification failed - see errors above" >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "‚úÖ All build verifications passed" >> $GITHUB_STEP_SUMMARY
          fi

      - name: üìã Pre-publish Validation
        run: |
          echo "## üìã Pre-publish Validation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check changeset status
          echo "### Changeset Status" >> $GITHUB_STEP_SUMMARY
          pnpm changeset status --verbose >> $GITHUB_STEP_SUMMARY 2>&1 || {
            echo "‚ö†Ô∏è Note: Some packages may have unreleased changes" >> $GITHUB_STEP_SUMMARY
          }
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Package Build Validation" >> $GITHUB_STEP_SUMMARY
          
          # Verify critical files exist for publishable packages
          if [ -f "packages/eslint-config/dist/index.js" ]; then
            echo "‚úÖ ESLint config build output verified" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ö†Ô∏è ESLint config build output not found at expected location" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: üöÄ Create Release or Publish
        id: changesets
        uses: changesets/action@v1.4.8
        with:
          # This will run pnpm changeset version && pnpm changeset publish
          publish: pnpm changeset publish
          # Commit message for version updates
          commit: "chore: version packages [skip ci]"
          # Title for version update PRs (if used in PR mode)
          title: "chore: version packages"
          # Create GitHub releases automatically
          createGithubReleases: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          HUSKY: 0 # Disable Husky hooks in CI
          # Add retry configuration for npm operations
          npm_config_fetch_retries: 5
          npm_config_fetch_retry_mintimeout: 20000
          npm_config_fetch_retry_maxtimeout: 120000

      - name: üì¶ Publish to GitHub Packages
        if: steps.changesets.outputs.published == 'true'
        env:
          # Use RELEASE_PAT (needs packages:write scope) or fallback to GITHUB_TOKEN
          GITHUB_TOKEN: ${{ secrets.RELEASE_PAT || secrets.GITHUB_TOKEN }}
        run: |
          echo "## üì¶ Publishing to GitHub Packages" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Store workspace directory with explicit fallback
          WORKSPACE_ROOT="${GITHUB_WORKSPACE:-$(pwd)}"
          
          # Create a temporary file to track results
          RESULTS_FILE="/tmp/github-packages-results.txt"
          > "$RESULTS_FILE"
          
          # Store the published packages JSON
          PUBLISHED_PKGS='${{ steps.changesets.outputs.publishedPackages }}'
          
          # Validate JSON
          if ! echo "$PUBLISHED_PKGS" | jq empty 2>/dev/null; then
            echo "‚ö†Ô∏è Warning: Published packages output is not valid JSON" >> $GITHUB_STEP_SUMMARY
            echo "Raw output: $PUBLISHED_PKGS" >> $GITHUB_STEP_SUMMARY
            PUBLISHED_PKGS='[]'
          fi
          
          # Function to setup GitHub Packages registry (using personal namespace)
          setup_github_registry() {
            # Create a separate npmrc for GitHub Packages
            cat > ~/.npmrc.github <<EOF
          @protomolecule:registry=https://npm.pkg.github.com/RobEasthope
          //npm.pkg.github.com/:_authToken=${GITHUB_TOKEN}
          EOF
          }
          
          # Function to check if package exists
          check_package_exists() {
            local pkg_name="$1"
            local pkg_version="$2"
            
            npm view "${pkg_name}@${pkg_version}" version \
              --userconfig ~/.npmrc.github \
              --registry=https://npm.pkg.github.com \
              2>/dev/null
          }
          
          # Function to publish with retries
          publish_with_retry() {
            local pkg_name="$1"
            local pkg_version="$2"
            local pkg_dir="$3"
            local max_attempts=3
            local attempt=1
            local wait_time=5
            
            cd "$pkg_dir" || return 1
            
            while [ $attempt -le $max_attempts ]; do
              echo "  üì§ Attempt $attempt of $max_attempts..."
              
              # Try to publish
              if output=$(npm publish --access public --userconfig ~/.npmrc.github 2>&1); then
                echo "SUCCESS:$pkg_name@$pkg_version" >> "$RESULTS_FILE"
                echo "  ‚úÖ Published successfully on attempt $attempt"
                return 0
              else
                # Check error type - separate 403 from "already published" errors
                if echo "$output" | grep -qE "(cannot publish over|409|E409|You cannot publish over)"; then
                  echo "SKIPPED:$pkg_name@$pkg_version" >> "$RESULTS_FILE"
                  echo "  ‚è≠Ô∏è Package already exists in registry"
                  return 0
                fi
                
                # 403 could be permission issue or already published
                if echo "$output" | grep -qE "(403|E403)"; then
                  # Check if it's specifically about version conflict
                  if echo "$output" | grep -qE "(version conflict|already published|cannot republish)"; then
                    echo "SKIPPED:$pkg_name@$pkg_version" >> "$RESULTS_FILE"
                    echo "  ‚è≠Ô∏è Package version already exists (403)"
                    return 0
                  else
                    echo "  ‚ùå Permission denied (403)"
                    echo "$output" | grep -E "(npm ERR|ERROR)" | head -5
                    echo "FAILED:$pkg_name@$pkg_version:permission_denied" >> "$RESULTS_FILE"
                    return 1
                  fi
                fi
                
                if echo "$output" | grep -qE "(401|E401|ENEEDAUTH|authentication|unauthorized)"; then
                  echo "  ‚ùå Authentication error detected"
                  echo "$output" | grep -E "(npm ERR|ERROR)" | head -5
                  echo "FAILED:$pkg_name@$pkg_version:auth_error" >> "$RESULTS_FILE"
                  return 1
                fi
                
                echo "  ‚ö†Ô∏è Attempt $attempt failed"
                echo "$output" | grep -E "(npm ERR|ERROR)" | head -3
                
                if [ $attempt -lt $max_attempts ]; then
                  echo "  ‚è≥ Waiting ${wait_time} seconds before retry..."
                  sleep $wait_time
                  wait_time=$((wait_time * 2))
                fi
              fi
              
              attempt=$((attempt + 1))
            done
            
            echo "FAILED:$pkg_name@$pkg_version:max_retries" >> "$RESULTS_FILE"
            echo "  ‚ùå All attempts exhausted"
            return 1
          }
          
          # Setup GitHub registry
          setup_github_registry
          
          # Process each package
          echo "$PUBLISHED_PKGS" | jq -c '.[]' 2>/dev/null | while IFS= read -r pkg; do
            name=$(echo "$pkg" | jq -r '.name')
            version=$(echo "$pkg" | jq -r '.version')
            dir=$(echo "$name" | sed 's/@protomolecule\///')
            
            echo ""
            echo "### üì¶ Processing $name@$version" >> $GITHUB_STEP_SUMMARY
            
            if [ ! -d "packages/$dir" ]; then
              echo "‚ùå Package directory not found: packages/$dir" >> $GITHUB_STEP_SUMMARY
              echo "FAILED:$name@$version:dir_not_found" >> "$RESULTS_FILE"
              continue
            fi
            
            # Check if already exists
            echo "üîç Checking if $name@$version exists in GitHub Packages..."
            if check_package_exists "$name" "$version"; then
              echo "‚è≠Ô∏è **Already published** - Skipping" >> $GITHUB_STEP_SUMMARY
              echo "SKIPPED:$name@$version" >> "$RESULTS_FILE"
              continue
            fi
            
            # Try to publish
            echo "üì§ Publishing $name@$version to GitHub Packages..."
            if publish_with_retry "$name" "$version" "$WORKSPACE_ROOT/packages/$dir"; then
              echo "‚úÖ **Successfully published**" >> $GITHUB_STEP_SUMMARY
            else
              echo "‚ùå **Failed to publish** - Check logs for details" >> $GITHUB_STEP_SUMMARY
            fi
            
            cd "$WORKSPACE_ROOT"
          done
          
          # Clean up
          rm -f ~/.npmrc.github
          
          # Generate summary
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üìä GitHub Packages Publishing Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Count results
          SUCCESS_COUNT=$(grep -c "^SUCCESS:" "$RESULTS_FILE" 2>/dev/null || echo 0)
          SKIPPED_COUNT=$(grep -c "^SKIPPED:" "$RESULTS_FILE" 2>/dev/null || echo 0)
          FAILED_COUNT=$(grep -c "^FAILED:" "$RESULTS_FILE" 2>/dev/null || echo 0)
          
          # Display successes
          if [ "$SUCCESS_COUNT" -gt 0 ]; then
            echo "### ‚úÖ Successfully Published ($SUCCESS_COUNT)" >> $GITHUB_STEP_SUMMARY
            grep "^SUCCESS:" "$RESULTS_FILE" | cut -d: -f2 | while read pkg; do
              echo "- $pkg" >> $GITHUB_STEP_SUMMARY
            done
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Display skipped
          if [ "$SKIPPED_COUNT" -gt 0 ]; then
            echo "### ‚è≠Ô∏è Already Published ($SKIPPED_COUNT)" >> $GITHUB_STEP_SUMMARY
            grep "^SKIPPED:" "$RESULTS_FILE" | cut -d: -f2 | while read pkg; do
              echo "- $pkg" >> $GITHUB_STEP_SUMMARY
            done
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Display failures
          if [ "$FAILED_COUNT" -gt 0 ]; then
            echo "### ‚ùå Failed ($FAILED_COUNT)" >> $GITHUB_STEP_SUMMARY
            grep "^FAILED:" "$RESULTS_FILE" | while IFS=: read -r _ pkg reason; do
              echo "- $pkg $([ -n "$reason" ] && echo "($reason)")" >> $GITHUB_STEP_SUMMARY
            done
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "‚ö†Ô∏è **Action Required**: Review the logs for detailed error messages" >> $GITHUB_STEP_SUMMARY
            
            # Clean up and exit with error
            rm -f "$RESULTS_FILE"
            exit 1
          fi
          
          # Success message
          if [ "$FAILED_COUNT" -eq 0 ]; then
            echo "‚úÖ **All packages processed successfully!**" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Clean up
          rm -f "$RESULTS_FILE"

      - name: ‚ú® Enhance GitHub Release Notes  
        if: steps.changesets.outputs.published == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # The changesets action already creates GitHub releases
          # This step can enhance them if needed
          
          # Get the published packages info from changesets output
          PUBLISHED='${{ steps.changesets.outputs.publishedPackages }}'
          
          if [ -n "$PUBLISHED" ] && [ "$PUBLISHED" != "[]" ]; then
            echo "üì¶ Packages were published successfully"
            echo "$PUBLISHED" | jq '.'
            
            # Optionally enhance the release notes that were already created
            # The changesets action creates releases with changelog content
          else
            echo "No packages were published in this release"
          fi

      - name: üîç Post-Publish Verification
        if: steps.changesets.outputs.published == 'true'
        run: |
          echo "## üîç Post-Publish Verification" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Parse published packages
          PUBLISHED='${{ steps.changesets.outputs.publishedPackages }}'
          
          if [ -n "$PUBLISHED" ] && [ "$PUBLISHED" != "[]" ]; then
            # Verify each published package exists on NPM
            echo "$PUBLISHED" | jq -r '.[] | "\(.name)@\(.version)"' | while read -r PACKAGE_VERSION; do
              PKG_NAME=$(echo "$PACKAGE_VERSION" | cut -d'@' -f1-2)
              PKG_VERSION=$(echo "$PACKAGE_VERSION" | cut -d'@' -f3)
              
              # Skip private packages
              if [[ "$PKG_NAME" == *"@protomolecule/"* ]]; then
                # Wait a moment for NPM to propagate
                sleep 5
                
                # Check if package is available on NPM (only for public packages)
                if npm view "$PACKAGE_VERSION" version >/dev/null 2>&1; then
                  echo "‚úÖ $PACKAGE_VERSION is available on NPM" >> $GITHUB_STEP_SUMMARY
                else
                  # It might be private or still propagating
                  echo "‚ö†Ô∏è $PACKAGE_VERSION not immediately visible on NPM (may be private or propagating)" >> $GITHUB_STEP_SUMMARY
                fi
              fi
            done
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Publishing process completed" >> $GITHUB_STEP_SUMMARY

      - name: üìä Generate Release Summary
        if: always()
        run: |
          echo "## üöÄ Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.changesets.outputs.published }}" == "true" ]; then
            echo "### ‚úÖ Release Successful!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Display published packages
            PUBLISHED='${{ steps.changesets.outputs.publishedPackages }}'
            if [ -n "$PUBLISHED" ] && [ "$PUBLISHED" != "[]" ]; then
              echo "**Published Packages:**" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              
              # Parse and display packages nicely
              if command -v jq >/dev/null 2>&1; then
                echo "$PUBLISHED" | jq -r '.[] | "- **\(.name)** v\(.version)"' >> $GITHUB_STEP_SUMMARY || {
                  echo "‚ö†Ô∏è Could not parse package details" >> $GITHUB_STEP_SUMMARY
                  echo '```json' >> $GITHUB_STEP_SUMMARY
                  echo "$PUBLISHED" >> $GITHUB_STEP_SUMMARY
                  echo '```' >> $GITHUB_STEP_SUMMARY
                }
              else
                echo '```json' >> $GITHUB_STEP_SUMMARY
                echo "$PUBLISHED" >> $GITHUB_STEP_SUMMARY
                echo '```' >> $GITHUB_STEP_SUMMARY
              fi
            fi
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "GitHub releases have been created with full changelogs." >> $GITHUB_STEP_SUMMARY
            
          elif [ "${{ steps.changesets.outputs.hasChangesets }}" == "false" ]; then
            echo "### ‚ÑπÔ∏è No Release Needed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "No changesets found in this push to main." >> $GITHUB_STEP_SUMMARY
            echo "All packages are up to date." >> $GITHUB_STEP_SUMMARY
          else
            echo "### ‚ö†Ô∏è Release Failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Changesets were found but publishing failed." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Action Required:**" >> $GITHUB_STEP_SUMMARY
            echo "1. Check the workflow logs for detailed error messages" >> $GITHUB_STEP_SUMMARY
            echo "2. Verify NPM_TOKEN is correctly configured" >> $GITHUB_STEP_SUMMARY
            echo "3. Ensure package.json files are valid" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "_Release triggered by commit: \`${{ github.sha }}\`_" >> $GITHUB_STEP_SUMMARY
          echo "_Workflow triggered by: @${{ github.actor }}_" >> $GITHUB_STEP_SUMMARY