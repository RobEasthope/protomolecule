name: Test Release Scripts

on:
  pull_request:
    paths:
      - '.github/scripts/**'
      - '.github/workflows/release.yml'
      - '.github/workflows/test-release-scripts.yml'

jobs:
  test-detect-published:
    name: Test detect-published.ts
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0 # Need history to test git diff

      - uses: pnpm/action-setup@v4

      - uses: actions/setup-node@v6
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Create test package with CHANGELOG
        run: |
          # Configure git
          git config user.name "Test User"
          git config user.email "test@example.com"

          # Create an initial commit without CHANGELOG
          mkdir -p test-pkg
          echo '{"name":"@robeasthope/test-pkg","version":"1.2.2"}' > test-pkg/package.json
          git add test-pkg
          git commit -m "test: initial package setup"

          # Now update CHANGELOG (this simulates a version bump)
          echo -e '## 1.2.3\n\n- Test change\n- Another change' > test-pkg/CHANGELOG.md
          echo '{"name":"@robeasthope/test-pkg","version":"1.2.3"}' > test-pkg/package.json
          git add test-pkg
          git commit -m "test: publish v1.2.3"

      - name: Run detect-published script
        id: detect
        run: pnpm tsx .github/scripts/detect-published.ts

      - name: Validate output
        run: |
          # Check step outputs
          if [[ "${{ steps.detect.outputs.published }}" != "true" ]]; then
            echo "❌ Expected published=true, got: ${{ steps.detect.outputs.published }}"
            exit 1
          fi

          # Validate published packages JSON
          PACKAGES='${{ steps.detect.outputs.publishedPackages }}'
          echo "Packages JSON: $PACKAGES"

          # Validate it's valid JSON
          echo "$PACKAGES" | jq empty

          # Validate it contains our test package
          if ! echo "$PACKAGES" | jq -e '.[] | select(.name == "@robeasthope/test-pkg")' > /dev/null; then
            echo "❌ Test package not found in output"
            exit 1
          fi

          echo "✅ detect-published script passed all tests"

  test-create-releases:
    name: Test create-releases.ts
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - uses: pnpm/action-setup@v4

      - uses: actions/setup-node@v6
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Create test CHANGELOG
        run: |
          mkdir -p apps/test-pkg
          cat > apps/test-pkg/CHANGELOG.md <<EOF
          ## 1.0.0

          ### Major Changes

          - Initial release

          ### Patch Changes

          - Fix: Something important
          EOF

      - name: Test changelog extraction (dry run)
        run: |
          # Test that the script can parse arguments and find changelog
          # We can't actually create releases without gh auth, but we can
          # test the parsing logic

          # The script will fail at gh CLI call, but should get past validation
          pnpm tsx .github/scripts/create-releases.ts "test/repo" || true

          # TODO: Add --dry-run flag to script for proper testing
          echo "✅ create-releases script validation passed"
        env:
          PUBLISHED_PACKAGES: '[{"name":"@robeasthope/test-pkg","version":"1.0.0"}]'

  test-bump-monorepo:
    name: Test bump-monorepo.ts
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - uses: pnpm/action-setup@v4

      - uses: actions/setup-node@v6
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Create test branch
        run: |
          git config user.name "Test User"
          git config user.email "test@example.com"
          git checkout -b test-bump-${{ github.run_id }}

      - name: Test version bump calculation
        run: |
          # Save original version
          ORIGINAL_VERSION=$(jq -r '.version' package.json)
          echo "Original version: $ORIGINAL_VERSION"

          # Run bump script with test data (patch bump)
          pnpm tsx .github/scripts/bump-monorepo.ts || {
            echo "Script failed - checking for expected git push error"
            # Script should fail on git push (no auth), but should have bumped version
          }

          # Check that version was bumped
          NEW_VERSION=$(jq -r '.version' package.json)
          echo "New version: $NEW_VERSION"

          if [[ "$NEW_VERSION" == "$ORIGINAL_VERSION" ]]; then
            echo "❌ Version was not bumped"
            exit 1
          fi

          # Verify temp files were created
          if [[ ! -f /tmp/bump-type.txt ]]; then
            echo "❌ Missing /tmp/bump-type.txt"
            exit 1
          fi

          BUMP_TYPE=$(cat /tmp/bump-type.txt)
          echo "Bump type: $BUMP_TYPE"

          if [[ ! -f /tmp/new-version.txt ]]; then
            echo "❌ Missing /tmp/new-version.txt"
            exit 1
          fi

          echo "✅ bump-monorepo script passed all tests"
        env:
          PUBLISHED_PACKAGES: '[{"name":"@robeasthope/test","version":"1.0.1"}]'

      - name: Cleanup
        if: always()
        run: |
          git checkout main
          git branch -D test-bump-${{ github.run_id }} || true

  test-generate-summary:
    name: Test generate-summary.ts
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - uses: pnpm/action-setup@v4

      - uses: actions/setup-node@v6
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Create test input data
        run: |
          echo '[{"name":"@robeasthope/test-pkg","version":"1.0.0"}]' > /tmp/published-packages.json
          echo "patch" > /tmp/bump-type.txt
          echo "1" > /tmp/package-count.txt
          echo "1.0.1" > /tmp/new-version.txt

      - name: Run generate-summary script
        run: pnpm tsx .github/scripts/generate-summary.ts

      - name: Validate output
        run: |
          # Check that summary file was created
          if [[ ! -f /tmp/release-summary.txt ]]; then
            echo "❌ Missing /tmp/release-summary.txt"
            exit 1
          fi

          # Validate summary has content
          SUMMARY=$(cat /tmp/release-summary.txt)
          if [[ -z "$SUMMARY" ]]; then
            echo "❌ Release summary is empty"
            exit 1
          fi

          echo "Release summary preview:"
          echo "$SUMMARY" | head -n 5

          echo "✅ generate-summary script passed all tests"

  test-typescript-compilation:
    name: Validate TypeScript
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - uses: pnpm/action-setup@v4

      - uses: actions/setup-node@v6
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check TypeScript compilation
        run: |
          # Verify scripts compile with TypeScript
          cd .github/scripts
          pnpm exec tsc --noEmit

          echo "✅ All TypeScript scripts compile without errors"
