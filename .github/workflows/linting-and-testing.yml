name: Linting & Testing

on:
  pull_request:
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: 🔬 Lint
    runs-on: ubuntu-latest
    steps:
      - name: ⏱️ Start Timer
        run: echo "JOB_START=$(date +%s)" >> $GITHUB_ENV

      - name: ⬇️ Checkout repo
        uses: actions/checkout@v4

      - name: 🔧 Setup Monorepo
        uses: ./.github/actions/setup-monorepo

      - name: 📦 Cache ESLint
        uses: actions/cache@v4
        with:
          path: |
            .turbo/.eslintcache-ui
            .turbo/.eslintcache-eslint-config
            .turbo/.eslintcache-root
          key: ${{ runner.os }}-eslint-${{ hashFiles('**/package.json', '**/.eslintrc*', '**/eslint.config.*') }}
          restore-keys: |
            ${{ runner.os }}-eslint-

      - name: 🏗️ Build eslint-config package
        run: pnpm --filter @protomolecule/eslint-config build

      - name: 🔬 Run ESLint
        id: lint
        run: |
          echo "## 🔬 ESLint Results" >> $GITHUB_STEP_SUMMARY
          # Run linting for packages and root
          LINT_FAILED=false
          if ! pnpm run lint; then
            echo "❌ **Package linting failed**" >> $GITHUB_STEP_SUMMARY
            LINT_FAILED=true
          fi
          if ! pnpm run lint:root; then
            echo "❌ **Root linting failed**" >> $GITHUB_STEP_SUMMARY
            LINT_FAILED=true
          fi
          
          if [ "$LINT_FAILED" = "false" ]; then
            echo "✅ **All linting passed successfully**" >> $GITHUB_STEP_SUMMARY
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "❌ **Linting failed** - Check the logs for details" >> $GITHUB_STEP_SUMMARY
            echo "status=failure" >> $GITHUB_OUTPUT
            exit 1
          fi

          # Calculate runtime
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - JOB_START))
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "_Duration: ${DURATION}s_" >> $GITHUB_STEP_SUMMARY

  typecheck:
    name: 🔎 Type Check
    runs-on: ubuntu-latest
    steps:
      - name: ⏱️ Start Timer
        run: echo "JOB_START=$(date +%s)" >> $GITHUB_ENV

      - name: ⬇️ Checkout repo
        uses: actions/checkout@v4

      - name: 🔧 Setup Monorepo
        uses: ./.github/actions/setup-monorepo

      - name: 🔧 Cache TypeScript build info
        uses: actions/cache@v4
        with:
          path: |
            **/*.tsbuildinfo
            **/tsconfig.tsbuildinfo
          key: ${{ runner.os }}-tsbuildinfo-${{ hashFiles('**/tsconfig.json', '**/tsconfig.*.json') }}
          restore-keys: |
            ${{ runner.os }}-tsbuildinfo-

      - name: 🔎 Run TypeScript Check
        id: typecheck
        run: |
          echo "## 🔎 TypeScript Results" >> $GITHUB_STEP_SUMMARY
          # Run type checking for packages and root
          TYPECHECK_FAILED=false
          if ! pnpm run build; then
            echo "❌ **Package type checking failed**" >> $GITHUB_STEP_SUMMARY
            TYPECHECK_FAILED=true
          fi
          if ! pnpm run typecheck; then
            echo "❌ **Root type checking failed**" >> $GITHUB_STEP_SUMMARY
            TYPECHECK_FAILED=true
          fi
          
          if [ "$TYPECHECK_FAILED" = "false" ]; then
            echo "✅ **All type checking passed successfully**" >> $GITHUB_STEP_SUMMARY
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "❌ **Type checking failed** - Check the logs for errors" >> $GITHUB_STEP_SUMMARY
            echo "status=failure" >> $GITHUB_OUTPUT
            exit 1
          fi

          # Calculate runtime
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - JOB_START))
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "_Duration: ${DURATION}s_" >> $GITHUB_STEP_SUMMARY

  changeset:
    name: 📝 Changeset Check
    runs-on: ubuntu-latest
    steps:
      - name: ⬇️ Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔧 Setup Monorepo
        uses: ./.github/actions/setup-monorepo

      - name: 📝 Check for changeset
        id: changeset
        run: |
          echo "## 📝 Changeset Check Results" >> $GITHUB_STEP_SUMMARY

          # Check if any packages have changes
          if git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -q "^packages/"; then
            echo "📦 Package changes detected" >> $GITHUB_STEP_SUMMARY
            
            # Check for changeset files (excluding README)
            CHANGESET_FILES=$(ls -A .changeset/*.md 2>/dev/null | grep -v README.md || true)
            if [ -z "$CHANGESET_FILES" ]; then
              echo "❌ **No changeset found!**" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "This PR modifies packages but has no changeset." >> $GITHUB_STEP_SUMMARY
              echo "Run \`pnpm changeset\` to add one." >> $GITHUB_STEP_SUMMARY
              echo "status=failure" >> $GITHUB_OUTPUT
              exit 1
            else
              # Validate changeset files have proper YAML frontmatter
              INVALID_CHANGESETS=""
              for file in $CHANGESET_FILES; do
                if ! grep -q "^---$" "$file" || ! grep -q "^---$" "$file" | head -2 | tail -1; then
                  INVALID_CHANGESETS="$INVALID_CHANGESETS $file"
                fi
              done
              
              if [ -n "$INVALID_CHANGESETS" ]; then
                echo "⚠️ **Invalid changeset format detected**" >> $GITHUB_STEP_SUMMARY
                echo "Files with invalid YAML frontmatter: $INVALID_CHANGESETS" >> $GITHUB_STEP_SUMMARY
                echo "status=failure" >> $GITHUB_OUTPUT
                exit 1
              else
                echo "✅ **Valid changeset found**" >> $GITHUB_STEP_SUMMARY
                echo "status=success" >> $GITHUB_OUTPUT
              fi
            fi
          else
            echo "✅ **No package changes - changeset not required**" >> $GITHUB_STEP_SUMMARY
            echo "status=success" >> $GITHUB_OUTPUT
          fi

  test:
    name: 🧪 Tests
    runs-on: ubuntu-latest
    steps:
      - name: ⏱️ Start Timer
        run: echo "JOB_START=$(date +%s)" >> $GITHUB_ENV

      - name: ⬇️ Checkout repo
        uses: actions/checkout@v4

      - name: 🔧 Setup Monorepo
        uses: ./.github/actions/setup-monorepo

      - name: 🧪 Cache Test Results
        uses: actions/cache@v4
        with:
          path: |
            packages/*/.vitest
            packages/*/coverage
            test-results
          key: ${{ runner.os }}-vitest-${{ hashFiles('**/src/**/*.test.*', '**/src/**/*.spec.*', '**/vitest.config.*') }}
          restore-keys: |
            ${{ runner.os }}-vitest-

      - name: 🧪 Run Unit Tests
        id: tests
        run: |
          echo "## 🧪 Test Results" >> $GITHUB_STEP_SUMMARY
          echo "Running tests..." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Run tests
          if pnpm test; then
            echo "✅ **All tests passed successfully**" >> $GITHUB_STEP_SUMMARY
            echo "status=success" >> $GITHUB_OUTPUT
            TEST_EXIT_CODE=0
          else
            echo "❌ **Tests failed** - Check the test report for details" >> $GITHUB_STEP_SUMMARY
            echo "status=failure" >> $GITHUB_OUTPUT
            TEST_EXIT_CODE=1
          fi

          # Calculate runtime
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - JOB_START))
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "_Duration: ${DURATION}s_" >> $GITHUB_STEP_SUMMARY

          # Exit with the test exit code
          exit $TEST_EXIT_CODE

  summary:
    name: 📊 Summary
    runs-on: ubuntu-latest
    needs: [lint, typecheck, test, changeset]
    if: always()
    steps:
      - name: 📊 Generate Summary Report
        run: |
          echo "## 📊 CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Determine overall status
          if [[ "${{ needs.lint.result }}" == "success" && "${{ needs.typecheck.result }}" == "success" && "${{ needs.test.result }}" == "success" && "${{ needs.changeset.result }}" == "success" ]]; then
            echo "### ✅ All checks passed!" >> $GITHUB_STEP_SUMMARY
            OVERALL_STATUS="success"
          else
            echo "### ❌ Some checks failed" >> $GITHUB_STEP_SUMMARY
            OVERALL_STATUS="failure"
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "| Check | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|---------|" >> $GITHUB_STEP_SUMMARY

          # Lint status
          if [[ "${{ needs.lint.result }}" == "success" ]]; then
            echo "| 🔬 ESLint | ✅ Passed | Code style checks passed |" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.lint.result }}" == "failure" ]]; then
            echo "| 🔬 ESLint | ❌ Failed | See [lint job logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| 🔬 ESLint | ⏭️ Skipped | - |" >> $GITHUB_STEP_SUMMARY
          fi

          # TypeScript status
          if [[ "${{ needs.typecheck.result }}" == "success" ]]; then
            echo "| 🔎 TypeScript | ✅ Passed | Type safety verified |" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.typecheck.result }}" == "failure" ]]; then
            echo "| 🔎 TypeScript | ❌ Failed | See [typecheck job logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| 🔎 TypeScript | ⏭️ Skipped | - |" >> $GITHUB_STEP_SUMMARY
          fi

          # Test status
          if [[ "${{ needs.test.result }}" == "success" ]]; then
            echo "| 🧪 Unit Tests | ✅ Passed | All tests successful |" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.test.result }}" == "failure" ]]; then
            echo "| 🧪 Unit Tests | ❌ Failed | See [test job logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| 🧪 Unit Tests | ⏭️ Skipped | - |" >> $GITHUB_STEP_SUMMARY
          fi

          # Changeset status
          if [[ "${{ needs.changeset.result }}" == "success" ]]; then
            echo "| 📝 Changeset | ✅ Passed | Version tracking ready |" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.changeset.result }}" == "failure" ]]; then
            echo "| 📝 Changeset | ❌ Failed | See [changeset job logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| 📝 Changeset | ⏭️ Skipped | - |" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ⚡ Performance Features" >> $GITHUB_STEP_SUMMARY
          echo "- **True Parallel Execution**: All checks run simultaneously from start" >> $GITHUB_STEP_SUMMARY
          echo "- **Composite Actions**: Reduced setup duplication" >> $GITHUB_STEP_SUMMARY
          echo "- **Smart Caching**: pnpm store, ESLint, TypeScript, and Turbo caches" >> $GITHUB_STEP_SUMMARY
          echo "- **Minimal Building**: Only builds what's necessary (eslint-config for linting)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "_Run #${{ github.run_number }} | Commit: \`${{ github.sha }}\`_" >> $GITHUB_STEP_SUMMARY

          # Exit with failure if any check failed
          if [[ "$OVERALL_STATUS" == "failure" ]]; then
            exit 1
          fi
